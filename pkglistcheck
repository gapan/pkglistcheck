#!/usr/bin/env python
# vim:et:sta:sts=4:sw=4:ts=8:tw=79:

from __future__ import print_function
import sys
import os
import collections

if not os.path.exists('CORE'):
    print('ERROR: You need to run this inside the directory with the package lists.')
    sys.exit(1)


package_data = '/var/slapt-get/package_data'
repopkg = [] # a list of packages in the repos
deps = [] # a list of dependencies. Indeces correspond to packages in repopkg
priorities = [] # a list of package priorities. Indeces correspond to repopkg

class PkgList:
    def __init__(self, name, present = True):
        self.name = name
        self.present = present
        if present:
            self.pkglist = self._readlist(name)
        else:
            self.pkglist = []

    def _readlist(self, filelist):
        '''
        Reads a package list in file "filelist". The list should be one package per
        line.
        '''
        pkglist = []
        with open(filelist, 'r') as f:
            while True:
                line = f.readline()
                if len(line) == 0:
                    break
                pkglist.append(line.replace('\n', '').strip())
        return pkglist

def print_title(title):
    l = len(title)
    print(title)
    print('=' * l)

def pkg_not_present_check(pkglist):
    print_title('Checking lists for packages not in the repos (not necessarily a problem)...')
    for i in pkglist:
        if i is not '':
            if i not in repopkg:
                print(i, 'is not in the repos')
    print()

def missing_deps_check(pkglist, prev = []):
    '''
    pkglist is the PkgList object that is to be checked.
    prev is a PkgList.pkglist that is also going to be checked against pkglist.
    All packages in pkglist.pkglist should be either in pkglist.pkglist or in
    prev.
    '''
    print_title('Checking {} for missing dependencies...'.format(pkglist.name))
    allpkg = pkglist.pkglist + prev
    for i in pkglist.pkglist:
        if i in repopkg:
            index = repopkg.index(i)
            for dep in deps[index]:
                if dep is not '':
                    if '|' in dep:
                        found = False
                        for altdep in dep.split('|'):
                            altdep_name = altdep.strip()
                            if altdep_name in allpkg:
                                found = True
                        if not found:
                            print(dep, 'is a dependency of', repopkg[index],
                                'but is not in the iso', pkglist.name, 'list')
                    elif dep not in allpkg:
                        print(dep, 'is a dependency of', repopkg[index],
                                'but is not in the iso', pkglist.name, 'list')
    print()

def not_needed_check(pkglist):
    print_title('Checking for packages that are not needed (not a problem in most cases)...')
    for i in pkglist:
        found = False
        for dep in deps:
            if i in dep:
                found = True
        if not found:
            print(i, 'is not required by any other packages')
    print()

def check_for_dupes_within(pkglist):
    '''
    Checks and prints duplicate entries within one PkgList
    '''
    print_title('Checking for duplicate items in {}'.format(pkglist.name))
    dupes = [item for item, count in collections.Counter(pkglist.pkglist).items() if count > 1]
    for i in dupes:
        print(i)
    print()

def check_for_dupes_between(list1, list2):
    '''
    Checks for duplicate entries between two PkgLists
    '''
    print_title('Checking for duplicate items between {} and {}'
            .format(list1.name, list2.name))
    s1 = set(list1.pkglist)
    s2 = set(list2.pkglist)
    common = []
    for i in s1:
        if i in s2:
            common.append(i)
    for i in s2:
        if i in s1:
            common.append(i)
    for i in sorted(set(common)):
        print(i)
    print()

# Read the package names, dependencies and package priorities from the
# package_data file.
with open(package_data, 'r') as f:
    while True:
        try:
            line = f.readline()
        except UnicodeDecodeError:
            # some packages (like aspell-fo) have badly encoded strings in them.
            # This is in the package description, so there is no harm in just
            # skipping those lines, as we're not actually using them
            pass
        else:
            if len(line) == 0:
                break
            if line.startswith('PACKAGE NAME:'):
                pkgname = line.replace('PACKAGE NAME:', '').strip(' ').rpartition('-')[0].rpartition('-')[0].rpartition('-')[0]
            elif line.startswith('PACKAGE PRIORITY:'):
                priority = int(line.replace('PACKAGE PRIORITY:', '').strip(' '))
            elif line.startswith('PACKAGE REQUIRED:'):
                dep = line.replace('PACKAGE REQUIRED:', '').replace('\n', '').strip().replace(' ', ',').split(',')
            elif line.startswith('PACKAGE DESCRIPTION:'):
                if pkgname in repopkg:
                    index = repopkg.index(pkgname)
                    if priority > priorities[index]:
                        repopkg[index] = pkgname
                        priorities[index] = priority
                        deps[index] = dep
                else:
                    repopkg.append(pkgname)
                    priorities.append(priority)
                    deps.append(dep)

# Setup package lists
core = PkgList('CORE')
if os.path.exists('BASIC'):
    basic = PkgList('BASIC')
else:
    basic = PkgList('BASIC', present = False)
if os.path.exists('FULL'):
    full = PkgList('FULL')
else:
    full = PkgList('FULL', present = False)

# Check for duplicates within each list
check_for_dupes_within(core)
if basic.present:
    check_for_dupes_within(basic)
if full.present:
    check_for_dupes_within(full)

# Check for duplicates between lists
if basic.present:
    check_for_dupes_between(core, basic)
    if full.present:
        check_for_dupes_between(core, full)
        check_for_dupes_between(basic, full)

# Check for missing dependencies in each list, every time taking into account
# all previous lists
missing_deps_check(core)
if basic.present:
    missing_deps_check(basic, prev = core.pkglist)
if full.present:
    missing_deps_check(full, prev = core.pkglist + basic.pkglist)

# List all packages that are not a dependency of anything else. Do that for all
# lists combined together.
isopkg = core.pkglist + basic.pkglist + full.pkglist
not_needed_check(isopkg)

# List all packages that are in the lists, but not in the repositories. Do that
# for all lists combined together.
pkg_not_present_check(isopkg)
